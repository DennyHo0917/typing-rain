---
description:
globs:
alwaysApply: false
---
# 沟通和开发原则

## 沟通规则

### 语言使用原则
- **对话语言**: 与用户的所有对话和交流使用**中文**
- **代码语言**: 项目中的所有代码、注释、变量名、函数名使用**英文**
- **文档语言**: 代码内的技术文档和注释使用**英文**，便于国际化和团队协作

## 核心开发原则

### 1. 最小化修改原则 (Minimal Changes Principle)
- **精确修改**: 只修改必要的代码部分，避免不必要的变更
- **保持稳定**: 在[index.html](mdc:index.html)中进行修改时，确保不影响现有功能
- **局部优化**: 优先考虑局部改进而非大规模重构
- **测试影响**: 每次修改后验证功能完整性
- **版本控制**: 使用小而频繁的提交，便于回滚和追踪

### 2. DRY原则 (Don't Repeat Yourself)
- **代码复用**: 避免重复的代码片段，提取共用功能
- **函数抽象**: 将重复的逻辑封装成可复用的函数
- **CSS复用**: 使用CSS类和变量避免样式重复
- **配置统一**: 将重复的配置项提取为常量或配置对象
- **模式一致**: 保持相似功能的实现模式一致

## 项目特定应用

### 针对Typing Rain项目的实践
- **单文件约束**: 在保持单文件架构下应用DRY原则
- **性能优先**: 最小化修改时考虑Canvas渲染性能
- **设计一致**: 保持cyberpunk风格设计的一致性
- **用户体验**: 确保修改不影响游戏的流畅性和响应性

### 代码质量标准
- **可读性**: 英文代码注释清晰明了
- **可维护性**: 遵循既定的代码组织模式
- **可扩展性**: 考虑未来功能扩展的可能性
- **性能意识**: 每次修改都考虑对游戏性能的影响
