---
description: 最小化修改原则和DRY原则的具体实施指南
globs:
alwaysApply: true
---
# 最小化修改原则与DRY原则实施指南

## 最小化修改原则 (Minimal Changes Principle)

### 核心理念
- **精确定位**: 只修改确实需要改变的代码行
- **影响范围最小化**: 避免连锁反应式的大规模修改
- **功能隔离**: 新功能应尽可能独立，不影响现有功能
- **渐进式改进**: 优先小步快跑，而非大规模重构

### 实施策略

#### 代码修改前的评估
1. **影响分析**: 评估修改对现有功能的潜在影响
2. **依赖检查**: 确认修改不会破坏现有的函数调用关系
3. **测试覆盖**: 确保修改后的代码有足够的测试验证
4. **回滚计划**: 准备快速回滚方案

#### 具体实施规则
- 修改现有函数时，优先添加参数而非改变函数签名
- 新增功能时，优先使用新的模块而非修改现有模块
- CSS修改时，优先添加新类而非修改现有样式
- 配置变更时，保持向后兼容性

### 项目特定应用

#### 针对单文件架构 (index.html)
- **局部修改**: 在HTML中添加新元素时，选择合适的插入位置
- **CSS隔离**: 新样式使用独特的类名，避免影响现有样式
- **JS函数扩展**: 优先扩展现有函数而非重写

#### 针对模块化架构 (src/js/)
- **模块边界**: 严格遵守模块职责，避免跨模块修改
- **接口稳定**: 保持模块间接口的稳定性
- **依赖最小**: 新模块尽量减少对现有模块的依赖

## DRY原则 (Don't Repeat Yourself)

### 核心理念
- **单一数据源**: 每个知识点在系统中只有一个权威表示
- **代码复用**: 相同逻辑只实现一次
- **配置统一**: 相同配置只定义一次
- **模式一致**: 相似功能使用相同的实现模式

### 识别重复的标准

#### 代码重复
- 相同或相似的函数逻辑
- 重复的条件判断
- 相同的数据处理流程
- 重复的DOM操作模式

#### 配置重复
- 硬编码的常量值
- 重复的样式定义
- 相同的事件处理逻辑
- 重复的错误处理代码

### 消除重复的策略

#### 函数抽象
```javascript
// 不好的做法 - 重复代码
function updateScore() {
    const element = document.getElementById('score');
    if (element) element.textContent = gameState.score;
}
function updateLevel() {
    const element = document.getElementById('level');
    if (element) element.textContent = gameState.level;
}

// 好的做法 - DRY原则
function updateElement(id, value) {
    const element = document.getElementById(id);
    if (element) element.textContent = value;
}