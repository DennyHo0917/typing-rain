---
description:
globs:
alwaysApply: false
---
# 模块化架构规则

## 目录约定

```
public/          # 纯静态文件（index.html、assets）
src/
  styles/        # SCSS/CSS 入口与变量
  i18n/          # 各语言 JSON 文件（键统一）
  js/
    core/        # 游戏核心逻辑（状态、渲染、道具）
    ui/          # DOM 操作与界面逻辑
    index.js     # 入口，负责初始化与主循环
build/ | dist/   # 打包产物，由构建工具生成
```

## 文件职责

- **gameState.js**  管理得分、关卡、生命、连击等游戏状态。
- **wordDatabase.js**  提供易/中/难词库，并负责随机抽词。
- **powerUps.js**  定义道具、冷却与效果实现。
- **rendering.js**  Canvas 绘制掉落词与粒子。
- **audio.js**  音效播放与静音切换。
- **language.js**  自动侦测、切换语言、DOM 文字更新。
- **domRefs.js**  缓存常用 DOM 节点，避免重复查询。
- **screens.js**  控制开始、结束、排行榜、隐私政策界面显示。
- **leaderboard.js**  localStorage 读写与排行渲染。
- **share.js**  生成分享文本并跳转 X(Twitter)。

## 迁移流程

1. **抽离 i18n**:  将 `languages` 对象拆成多语言 JSON；入口按需动态导入。
2. **提取样式**:  把内联 `<style>` 迁移到 `styles/main.scss`；使用 PostCSS/Vite 自动注入。
3. **拆分 JS**:  先复制旧逻辑到 `index.js`，再按模块逐步移动函数，保证每次重构后编译通过。
4. **选择构建工具**:  推荐 Vite → 零配置、支持热更新与 Tree-Shaking。
5. **确保向下兼容**:  localStorage key、路径、GA/AdSense 脚本保持不变。

## 开发准则

- 遵循 **DRY** 与最小侵入原则，每次 PR 聚焦单一模块拆分。
- 拆分后立即跑 `npm run dev` 验证；确保 CI 通过再合并。
- 任何公共常量放入 `constants.js` 或对应模块顶部，避免魔法数字。
- UI 文案严禁散落在逻辑代码，必须通过 i18n 加载。
- 所有模块初始导出 **纯函数** 或 **类实例**，禁止在文件顶层产生副作用（除事件监听注册）。

## 构建与部署

- `npm run dev`  → 本地开发 + 热重载。
- `npm run build` → 生成 dist/，自动压缩 CSS/JS。
- dist 目录下文件即为生产部署内容，保持旧 URL 不变。
